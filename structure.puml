@startuml
namespace command {
    interface BaseCmd  {
        + GetExec() *exec.Cmd
        + SetInput( string) 
        + SetInputf( string,  ...any) 
        + Std( bool,  bool,  bool) 
        + Stdout( bool) 
        + Stdin( bool) 
        + Stderr( bool) 
        + Run() error
        + Out() (string, error)
        + Start() error
        + CombinedOut() (string, error)
        + SetAndStartf( string,  ...any) error
        + SetAndCombinedOutf( string,  ...any) (string, error)
        + SetAndOutf( string,  ...any) (string, error)
        + SetAndRunf( string,  ...any) error
        + SetAndStart( string) error
        + SetAndCombinedOut( string) (string, error)
        + SetAndOut( string) (string, error)
        + SetAndRun( string) error

    }
    class Cmd << (S,Aquamarine) >> {
        + Shell <font color=blue>struct</font>{bool, bool, <font color=blue>struct</font>{bool, string, string}}
        + Chroot <font color=blue>struct</font>{string, bool}
        + Powershell <font color=blue>struct</font>{string, bool}
        + Cmd <font color=blue>struct</font>{string, bool, bool}

        - getExec() *exec.Cmd
        - getFinal() *exec.Cmd
        - formatcmd() string
        - getExec() *exec.Cmd

        + RunWithShell(set bool) 
        + CustomShell(shellName string, execArg string) 
        + UseBashShell(set bool) 
        + GetChroot() (string, bool)
        + SetChroot(mountPoint string) 
        + EnableChroot() 
        + DisableChroot() 
        + SetChrootf(mountPoint string, args ...any) 
        + Run() error
        + Out() (string, error)
        + CombinedOut() (string, error)
        + Start() error
        + GetExec() *exec.Cmd
        + RunWithPS(set bool) 
        + UsingPS() bool
        + UsingCmd() bool
        + SetRawExec(set bool) 
        + RawExec() bool
        + SetHideCmd(set bool) 
        + HideCmd() bool
        + SetPSFlags(flags string) 
        + SetPSFlagsf(flags string, args ...any) 
        + SetCmdFlags(flags string) 
        + SetCmdFlagsf(flags string, args ...any) 
        + PSFlags() string
        + CmdFlags() string
        + Run() error
        + Start() error
        + Out() (string, error)
        + CombinedOut() (string, error)
        + GetExec() *exec.Cmd
        + SetAndRun(command string) error
        + SetAndOut(command string) (string, error)
        + SetAndCombinedOut(command string) (string, error)
        + SetAndStart(command string) error
        + SetAndRunf(command string, args ...any) error
        + SetAndOutf(command string, args ...any) (string, error)
        + SetAndCombinedOutf(command string, args ...any) (string, error)
        + SetAndStartf(command string, args ...any) error

    }
    class SudoCmd << (S,Aquamarine) >> {
        - sudoPars <font color=blue>struct</font>{bool, string}

        - getExec() *exec.Cmd
        - writePasswd(cmd *exec.Cmd) error

        + SetPasswd(password string) 
        + GetExec() *exec.Cmd
        + Run() error
        + Out() (string, error)
        + CombinedOut() (string, error)
        + Start() error

    }
    interface UnixCmd  {
        + RunWithShell( bool) 
        + UseBashShell( bool) 
        + CustomShell( string,  string) 
        + GetChroot() (string, bool)
        + SetChroot( string) 
        + SetChrootf( string,  ...any) 
        + EnableChroot() 
        + DisableChroot() 

    }
    interface UnixSudoCmd  {
        + SetPasswd( string) 

    }
    interface WindowsCmd  {
        + RunWithPS( bool) 
        + SetRawExec( bool) 
        + RawExec() bool
        + SetHideCmd( bool) 
        + HideCmd() bool
        + UsingPS() bool
        + UsingCmd() bool
        + SetPSFlags( string) 
        + SetPSFlagsf( string,  ...any) 
        + PSFlags() string
        + SetCmdFlags( string) 
        + SetCmdFlagsf( string,  ...any) 
        + CmdFlags() string

    }
}
"internal.Shared" *-- "command.Cmd"
"command.Cmd" *-- "command.SudoCmd"
"command.BaseCmd" *-- "command.UnixCmd"
"command.UnixCmd" *-- "command.UnixSudoCmd"
"command.BaseCmd" *-- "command.WindowsCmd"

"command.UnixCmd" <|-- "command.Cmd"
"command.WindowsCmd" <|-- "command.Cmd"
"command.UnixSudoCmd" <|-- "command.SudoCmd"

namespace internal {
    class Shared << (S,Aquamarine) >> {
        + Input string
        + Path string
        + PathConf <font color=blue>struct</font>{bool, string}
        + CStd <font color=blue>struct</font>{bool, bool, bool, bool}

        + SetInput(input string) 
        + SetInputf(input string, args ...any) 
        + SetPath(path string) 
        + SetPathf(path string, args ...any) 
        + Std(stdin bool, stdout bool, stderr bool) 
        + Stdin(set bool) 
        + Stdout(set bool) 
        + Stderr(set bool) 

    }
}


@enduml
